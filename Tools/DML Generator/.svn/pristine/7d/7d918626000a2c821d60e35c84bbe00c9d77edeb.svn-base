using System;
using System.Collections.Generic;
using Data = System.Data;
using System.Diagnostics.Contracts;
using DML.Generator.Domain;
using Microsoft.Office.Interop.Excel;

namespace DML.Generator.Domain.Extensions
{
    public static class ExtensionMethods
    {
        /// <summary>
        /// Toes the data table.
        /// </summary>
        /// <param name="Info">The info.</param>
        /// <returns></returns>
        public static Data::DataTable ToDataTable(this DMLInfo Info)
        { 
            Contract.Requires(Info != null);
            Data::DataTable table = new Data::DataTable(Info.SheetData.TableName);
            BuildDataColumns(ref table,Info);
            return table;
        }

        /// <summary>
        /// Builds the data columns.
        /// </summary>
        /// <param name="table">The table.</param>
        /// <param name="Info">The info.</param>
        private static void BuildDataColumns(ref Data::DataTable table, DMLInfo Info)
        {
            List<Data::DataColumn> keyColumn = new List<Data::DataColumn>();
            for (int i = 2; i <= Info.SheetData.ColumnCount; i++)
            {
                Data::DataColumn column = new Data::DataColumn
                {
                    ColumnName = Info.SheetData.UsedRange[Info.SheetData.ColumnRowIndex, i].ToString(),
                    DataType = GetDataType(Info.SheetData.UsedRange[Info.SheetData.TypeRowIndex, i].ToString())
                };

                GetMaxLength(Info.SheetData.UsedRange[Info.SheetData.TypeRowIndex, i].ToString(), ref column);

                if (Info.SheetData.UsedRange[Info.SheetData.PrimaryRowIndex, i] != null && string.Equals(Info.SheetData.UsedRange[Info.SheetData.PrimaryRowIndex, i].ToString().ToLower(), "yes"))
                {
                    keyColumn.Add(column);
                }
                table.Columns.Add(column);
            }
            table.PrimaryKey = keyColumn.ToArray();
        }

        /// <summary>
        /// Gets the length of the max.
        /// </summary>
        /// <param name="colType">Type of the col.</param>
        /// <param name="column">The column.</param>
        private static void GetMaxLength(string colType, ref Data.DataColumn column)
        {
            if (column.DataType == typeof(System.String))
            { 
                if (colType.ToUpper().IndexOf('(') > -1)
                {
                    column.MaxLength = Int32.Parse(colType.Split('(')[1].Replace(")", string.Empty).Trim());
                }
            }
        }

        /// <summary>
        /// Gets the type of the data.
        /// </summary>
        /// <param name="ColType">Type of the col.</param>
        /// <returns></returns>
        private static Type GetDataType(string colType)
        {
            if (colType.ToUpper().IndexOf("CHAR") > -1)
            {
                return System.Type.GetType("System.String");
            }
            
            if (colType.ToUpper().IndexOf("INT") > -1)
            {
                return System.Type.GetType("System.Int32");
            }
                       
            if (colType.ToUpper().IndexOf("DATE") > -1 || colType.ToUpper().IndexOf("TIME") > -1)
            {
                return System.Type.GetType("System.DateTime");
            }
            
            if (colType.ToUpper().IndexOf("DECIMAL") > -1)
            {       
                return System.Type.GetType("System.Decimal");
            }

            throw new ArgumentException (string.Format("Data type is not supported for {0}", colType));
        }
    }
}