using System;
using System.Diagnostics.Contracts;
using System.IO;
using System.Web;
using System.Web.Mvc;
using DML.Generator.Domain;
using DML.Generator.Web.Attributes;
using DML.Generator.Web.Helper;
using DML.Generator.Web.Models;
using System.Data;
using System.Linq;
using DML.Generator.Domain.Extensions;
using System.Collections.Generic;
using DML.Generator.Web.Extension;
using System.Threading;
using System.Text;

namespace DML.Generator.Web.Controllers
{
    public class HomeController : BaseController
    {
        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult FileUpload()
        {
            this.FileUploadViewModel = new FileUploadViewModel(Guid.NewGuid().ToString());
            return View(this.FileUploadViewModel);
        }

        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <param name="excelFile">The excel file.</param>
        /// <returns></returns>
        [HttpPost]
        [Button(ButtonName="Upload")]
        public ActionResult FileUpload(HttpPostedFileBase excelFile)
        {
            string fileName = string.Empty;
            string path = string.Empty;
            string filePath = string.Empty;

            //this.FileUploadViewModel = new FileUploadViewModel();

            if (excelFile != null && excelFile.ContentLength > 0)
            {
                fileName = Path.GetFileName(excelFile.FileName);
                path = DMLHelper.GetDirectoryPath(Request.UserHostAddress);
                DMLHelper.CreateDirectory(path);
                filePath = DMLHelper.GetFilePath(path, fileName);
                excelFile.SaveAs(filePath);
            }

            ExcelFactory excel = new ExcelFactory(filePath);
            this.FileUploadViewModel.DMLInfo = excel.GetSheetData();
            return View(this.FileUploadViewModel); 
        }

        /// <summary>
        /// Creates the DML.
        /// </summary>
        /// <returns></returns>
        public ActionResult CreateDML()
        {
            Contract.Requires(this.FileUploadViewModel != null, "File upload view model is null.");
            Contract.Requires(this.FileUploadViewModel.DMLInfo != null, "DML information is null.");
            Contract.Requires(this.FileUploadViewModel.DMLInfo.Count > 0, "DML information is null.");
            this.PopulateDataSet();
            Contract.Assert(this.FileUploadViewModel.DMLDataSet != null);
            this.GenerateDMLStrings();
            var data =
                new
                {
                    ProcessStatus = "Process Complete"
                };
            return Json(data);
        }

        /// <summary>
        /// Generates the DML strings.
        /// </summary>
        private void GenerateDMLStrings()
        {
            string HostFileName = string.Empty;
            string FEDMLName = string.Empty;
            string SheetName = string.Empty;
            foreach (DataTable dataTable in this.FileUploadViewModel.DMLDataSet.Tables)
            {
                List<DMLInfo> DMLInfo = this.FileUploadViewModel.DMLInfo.FindAll(x => string.Equals(x.SheetData.TableName, dataTable.TableName));
                
                DMLInfo.ForEach(dmlInfo => { 
                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Generating DML.", dmlInfo.SheetData.Name));
                    Thread.Sleep(200);
                });

                HostFileName = this.FileUploadViewModel.DMLInfo.FirstOrDefault(x => string.Equals(x.SheetData.TableName, dataTable.TableName)).HostDMLName;
                FEDMLName = this.FileUploadViewModel.DMLInfo.FirstOrDefault(x => string.Equals(x.SheetData.TableName, dataTable.TableName)).FEDMLName;
                string HostDeleteDMLString = this.GetHostDeleteDmlString(dataTable);
                HostDeleteDMLString.WriteToFile("HOST",Request.UserHostAddress,HostFileName);
                string HostInsertDMLString = this.GetHostInsertDmlString(dataTable);
                HostInsertDMLString.WriteToFile("HOST", Request.UserHostAddress, HostFileName);
                DMLInfo.ForEach(dmlInfo => 
                {
                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Process Complete.", dmlInfo.SheetData.Name));
                    Thread.Sleep(200);
                });
            }
        }

        /// <summary>
        /// Gets the host insert DML string.
        /// </summary>
        /// <param name="dataTable">The data table.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        private string GetHostInsertDmlString(DataTable dataTable)
        {
            StringBuilder hostDMLString = new StringBuilder();
            foreach (DataRow row in dataTable.Rows)
            {
                if (string.Equals(row["Action"].ToString().ToLower(), "add"))
                {
                    hostDMLString.Append(string.Format("INSERT INTO {0}", dataTable.TableName));
                    hostDMLString.Append("\r\n(");
                    foreach (DataColumn column in dataTable.Columns)
                    {
                        if (!string.Equals(column.ColumnName, "Action"))
                        {
                            hostDMLString.Append(string.Format("{0} ,\r\n", column.ColumnName));
                        }
                    }
                    hostDMLString.Remove(hostDMLString.Length - 4, 4);
                    hostDMLString.Append(")\r\nVALUES(\r\n");
                    foreach (object column in row.ItemArray.Skip(1))
                    {
                        if (column.GetType() == typeof(System.DBNull))
                        {
                            hostDMLString.Append(string.Format("{0} ,\r\n", "null"));
                        }
                        else if (column.GetType() == typeof(System.Int32))
                        {
                            hostDMLString.Append(string.Format("{0} ,\r\n", column));
                        }
                        else if (column.GetType() == typeof(System.DateTime))
                        {
                            string dateInHostFormat = DateTime.Parse(column.ToString()).ToString("dd.MM.yyyy");
                            hostDMLString.Append(string.Format("'{0}' ,\r\n", dateInHostFormat));
                        }
                        else
                        {
                            hostDMLString.Append(string.Format("'{0}' ,\r\n", column));
                        }
                    }

                    hostDMLString.Remove(hostDMLString.Length - 4, 4);
                    hostDMLString.Append(");\r\n\r\n");
                }
            }

            return hostDMLString.ToString();
        }

        /// <summary>
        /// Gets the host DML string.
        /// </summary>
        /// <param name="dataTable">The data table.</param>
        /// <returns></returns>
        /// <remarks></remarks>
        private string GetHostDeleteDmlString(DataTable dataTable)
        {
            StringBuilder hostDMLString = new StringBuilder();
            foreach (DataRow row in dataTable.Rows)
            {
                hostDMLString.Append(string.Format("DELETE FROM {0}", dataTable.TableName));
                hostDMLString.Append("\r\nWHERE\r\n");
                foreach (DataColumn column in dataTable.PrimaryKey)
                {
                    if (column.DataType == typeof(System.Int32))
                    {
                        hostDMLString.Append(string.Format("{0} = {1}\r\nAND ",column.ColumnName, row[column]));
                    }
                    else if (column.DataType == typeof(System.DateTime))
                    {
                        string dateInHostFormat = DateTime.Parse(row[column].ToString()).ToString("dd.MM.yyyy");
                        hostDMLString.Append(string.Format("{0} = '{1}'\r\nAND ", column.ColumnName, dateInHostFormat));
                    }
                    else
                    {
                        hostDMLString.Append(string.Format("{0} = '{1}'\r\nAND ", column.ColumnName, row[column]));
                    }
                }

                hostDMLString.Remove(hostDMLString.Length - 4, 4);
                hostDMLString.Append(";\r\n\r\n");
            }

            return hostDMLString.ToString();
        }

        /// <summary>
        /// Populates the data set.
        /// </summary>
        private void PopulateDataSet()
        {
            this.FileUploadViewModel.DMLDataSet = new DataSet();

            this.FileUploadViewModel.DMLInfo.ForEach(
                Info =>
                {
                    if (!this.FileUploadViewModel.DMLDataSet.Tables.Contains(Info.SheetData.TableName))
                    {
                        this.FileUploadViewModel.DMLDataSet.Tables.Add(Info.ToDataTable());
                    }
                    else
                    {
                        foreach (DataRow row in Info.ToDataTable().Rows)
                        {
                            this.FileUploadViewModel.DMLDataSet.Tables[Info.SheetData.TableName].ImportRow(row);
                        }
                    }

                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Dataset Processed.", Info.SheetData.Name));
                    Thread.Sleep(200);
                });
        }
    }
}
