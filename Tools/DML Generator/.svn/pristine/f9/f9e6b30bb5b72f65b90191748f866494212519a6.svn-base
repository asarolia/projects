namespace DML.Generator.Web.Controllers
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Diagnostics.Contracts;
    using System.IO;
    using System.Linq;
    using System.Threading;
    using System.Web;
    using System.Web.Mvc;
    using DML.Generator.Domain;
    using DML.Generator.Domain.DML;
    using DML.Generator.Domain.Extensions;
    using DML.Generator.Web.Attributes;
    using DML.Generator.Web.Extension;
    using DML.Generator.Web.Helper;
    using DML.Generator.Web.Models;
    using Ionic.Zip;

    public class HomeController : BaseController
    {
        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult FileUpload()
        {
            this.FileUploadViewModel = new FileUploadViewModel(Guid.NewGuid().ToString());
            return View(this.FileUploadViewModel);
        }

        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <param name="excelFile">The excel file.</param>
        /// <returns></returns>
        [HttpPost]
        [Button(ButtonName="Upload")]
        public ActionResult FileUpload(HttpPostedFileBase excelFile)
        {
            string fileName = string.Empty;
            string path = string.Empty;
            string filePath = string.Empty;

            if (excelFile == null)
            {
                return View(this.FileUploadViewModel); 
            }

            if (excelFile != null && excelFile.ContentLength > 0)
            {
                fileName = Path.GetFileName(excelFile.FileName);
                path = DMLHelper.GetDirectoryPath(Request.UserHostAddress);
                DMLHelper.CreateDirectory(path);
                filePath = DMLHelper.GetFilePath(path, fileName);
                excelFile.SaveAs(filePath);
            }

            ExcelFactory excel = new ExcelFactory(filePath);
            this.FileUploadViewModel.DMLInfo = excel.GetSheetData();
            return View(this.FileUploadViewModel); 
        }

        /// <summary>
        /// Creates the DML.
        /// </summary>
        /// <returns></returns>
        public ActionResult CreateDML()
        {
            Contract.Requires(this.FileUploadViewModel != null, "File upload view model is null.");
            Contract.Requires(this.FileUploadViewModel.DMLInfo != null, "DML information is null.");
            Contract.Requires(this.FileUploadViewModel.DMLInfo.Count > 0, "DML information is null.");
            this.PopulateDataSet();
            Contract.Assert(this.FileUploadViewModel.DMLDataSet != null);
            this.GenerateDMLStrings();
            var data =
                new
                {
                    ProcessStatus = "Process Complete"
                };
            return Json(data);
        }

        /// <summary>
        /// Generates the DML strings.
        /// </summary>
        private void GenerateDMLStrings()
        {
            string HostFileName = string.Empty;
            string FEFileName = string.Empty;
            string SheetName = string.Empty;
            foreach (DataTable dataTable in this.FileUploadViewModel.DMLDataSet.Tables)
            {
                List<DMLInfo> DMLInfo = this.FileUploadViewModel.DMLInfo.FindAll(x => string.Equals(x.SheetData.TableName, dataTable.TableName));
                
                DMLInfo.ForEach(dmlInfo => { 
                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Generating DML.", dmlInfo.SheetData.Name));
                    Thread.Sleep(200);
                });

                HostFileName = this.FileUploadViewModel.DMLInfo.FirstOrDefault(x => string.Equals(x.SheetData.TableName, dataTable.TableName)).HostDMLName;
                FEFileName = this.FileUploadViewModel.DMLInfo.FirstOrDefault(x => string.Equals(x.SheetData.TableName, dataTable.TableName)).FEDMLName;
                HostDML hostDML = new HostDML(dataTable);
                hostDML.DeleteStatement.WriteToFile("HOST", Request.UserHostAddress, HostFileName);
                hostDML.InsertStatement.WriteToFile("HOST", Request.UserHostAddress, HostFileName);

                FEDML FeDML = new FEDML(dataTable);
                FeDML.DeleteStatement.WriteToFile("FE", Request.UserHostAddress, FEFileName);
                FeDML.InsertStatement.WriteToFile("FE", Request.UserHostAddress, FEFileName);

                DMLInfo.ForEach(dmlInfo => 
                {
                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Process Complete.", dmlInfo.SheetData.Name));
                    Thread.Sleep(200);
                });
            }
        }

        /// <summary>
        /// Downloads the DML.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <returns></returns>
        public FileResult DownloadDML(string id)
        {
            string directoryPath = Path.Combine(DMLHelper.GetDirectoryPath(Request.UserHostAddress), id);
            string zipTo = directoryPath + ".zip";
            string downloadName = id + "DML.zip";
            
            using (ZipFile zip = new ZipFile())
            {
                zip.AddDirectory(directoryPath);
                zip.Save(zipTo);
            }

            return File(zipTo, "application/zip", downloadName);
        }

        /// <summary>
        /// Populates the data set.
        /// </summary>
        private void PopulateDataSet()
        {
            this.FileUploadViewModel.DMLDataSet = new DataSet();

            this.FileUploadViewModel.DMLInfo.ForEach(
                Info =>
                {
                    if (!this.FileUploadViewModel.DMLDataSet.Tables.Contains(Info.SheetData.TableName))
                    {
                        this.FileUploadViewModel.DMLDataSet.Tables.Add(Info.ToDataTable());
                    }
                    else
                    {
                        foreach (DataRow row in Info.ToDataTable().Rows)
                        {
                            this.FileUploadViewModel.DMLDataSet.Tables[Info.SheetData.TableName].ImportRow(row);
                        }
                    }

                    DMLHelper.BrodCast(this.FileUploadViewModel.ConnectionId, string.Format("#{0}:Dataset Processed.", Info.SheetData.Name));
                    Thread.Sleep(200);
                });
        }
    }
}
