using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;
using Microsoft.Office.Interop.Excel;

namespace DML.Generator.Domain
{
    /// <summary>
    /// 
    /// </summary>
    public class DMLInfo
    {

        public DMLInfo(SheetData SheetData)
        {
            this.SheetData = SheetData;
            this.PopulateFEDMLName();
            this.PopulateHostDMLName();
        }

        /// <summary>
        /// Gets the name of the host DML.
        /// </summary>
        /// <value>
        /// The name of the host DML.
        /// </value>
        public string HostDMLName { get; private set; }

        /// <summary>
        /// Gets or sets the name of the FED ml.
        /// </summary>
        /// <value>
        /// The name of the FED ml.
        /// </value>
        public string FEDMlName { get; private set; }

        /// <summary>
        /// Gets the sheet data.
        /// </summary>
        public SheetData SheetData { get; private set; }

        /// <summary>
        /// Populates the name of the FEDML.
        /// </summary>
        private void PopulateFEDMLName()
        {
            XDocument doc = XDocument.Load(System.Configuration.ConfigurationManager.AppSettings.Get("Mapping"));
            XElement element = doc.Root.Elements(this.SheetData.TableName).FirstOrDefault();

            if (element != null && element.Attribute("FeDML") != null)
            {
                this.FEDMlName = element.Attribute("FeDML").Value;
            }
        }

        /// <summary>
        /// Populates the name of the host DML.
        /// </summary>
        private void PopulateHostDMLName()
        {
            XDocument doc = XDocument.Load(System.Configuration.ConfigurationManager.AppSettings.Get("Mapping"));
            XElement element = doc.Root.Elements(this.SheetData.TableName).FirstOrDefault();

            if (element != null && element.Attribute("HostCB") != null)
            {
                this.HostDMLName = element.Attribute("HostCB").Value;
            }
            else 
            {
                this.HostDMLName = this.GetHostDMLNameForGroup(this.GetSchemeId());
            }
        }

        /// <summary>
        /// Gets the scheme id.
        /// </summary>
        /// <param name="range">The range.</param>
        /// <returns></returns>
        private string GetSchemeId()
        {
            string schemeId = string.Empty;
            int rowCount = 1;
            int colCount = 1;

            foreach (Range row in this.SheetData.UsedRange.Rows)
            {
                colCount = 1;
                foreach (Range col in row.Cells)
                {
                    if (col != null && col.Value2 != null && string.Equals(col.Value2, "SCHEME_ID"))
                    {
                        return this.SheetData.UsedRange.Value2[rowCount + 4, colCount].ToString();
                    }
                    colCount++;
                }
                rowCount++;
            }

            return schemeId;
        }

        /// <summary>
        /// Gets the host DML name for group.
        /// </summary>
        /// <param name="tableName">Name of the table.</param>
        /// <param name="schemeID">The scheme ID.</param>
        /// <returns></returns>
        private string GetHostDMLNameForGroup(string schemeID)
        {
            XDocument doc = XDocument.Load(System.Configuration.ConfigurationManager.AppSettings.Get("Mapping"));
            XElement element = doc.Root.Elements(this.SheetData.TableName).FirstOrDefault();

            if (element != null && element.Attribute("grping") != null && string.Equals(element.Attribute("grping").Value.ToUpper(), "Y"))
            {
                XElement childElement = element.Elements("DML_grp_map").FirstOrDefault(x => x.Attribute("value") != null && string.Equals(x.Attribute("value").Value, schemeID));
                if (childElement != null)
                {
                    return childElement.Attribute("HostCB").Value;
                }
            }

            return string.Empty;
        }
    }
}
