using System.Web.Mvc;
using Live.Log.Extractor.Web.Helper;
using SignalR;
using SignalR.Hosting.AspNet;
using SignalR.Infrastructure;
using DML.Generator.Web.Models;

namespace DML.Generator.Web.Controllers
{
    public class BaseController : Controller
    {
        /// <summary>
        /// FileUpload view model
        /// </summary>
        protected FileUploadViewModel FileUploadViewModel = new FileUploadViewModel();
        
        /// <summary>
        /// Session Key
        /// </summary>
        public const string sessionKey = "FileUploadModel";
        
        /// <summary>
        /// Brodcast the message.
        /// </summary>
        /// <param name="message">The message.</param>
        public void BrodCast(string connectionId, string message)
        {
            IConnectionManager connectionManager = AspNetHost.DependencyResolver.Resolve<IConnectionManager>();
            dynamic clients = connectionManager.GetClients<Chat>();
            clients.addMessage(connectionId, message);
        }

        /// <summary>
        /// Called before the action method is invoked.
        /// </summary>
        /// <param name="filterContext">Information about the current request and action.</param>
        protected override void OnActionExecuting(ActionExecutingContext filterContext)
        {
            base.OnActionExecuting(filterContext);
            this.FileUploadViewModel = Session[sessionKey] != null ? (FileUploadViewModel)Session[sessionKey] : this.FileUploadViewModel;
        }

        /// <summary>
        /// Called before the action result that is returned by an action method is executed.
        /// </summary>
        /// <param name="filterContext">Information about the current request and action result</param>
        protected override void OnResultExecuting(ResultExecutingContext filterContext)
        {
            base.OnResultExecuting(filterContext);
            Session[sessionKey] = this.FileUploadViewModel;
        }
    }
}
