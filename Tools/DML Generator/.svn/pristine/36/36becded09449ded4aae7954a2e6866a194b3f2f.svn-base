using System;
using System.Diagnostics.Contracts;
using System.IO;
using System.Web;
using System.Web.Mvc;
using DML.Generator.Domain;
using DML.Generator.Web.Attributes;
using DML.Generator.Web.Helper;
using DML.Generator.Web.Models;
using System.Data;
using DML.Generator.Domain.Extensions;

namespace DML.Generator.Web.Controllers
{
    public class HomeController : BaseController
    {
        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult FileUpload()
        {
            this.FileUploadViewModel = new FileUploadViewModel();
            return View(this.FileUploadViewModel);
        }

        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <param name="excelFile">The excel file.</param>
        /// <returns></returns>
        [HttpPost]
        [Button(ButtonName="Upload")]
        public ActionResult FileUpload(HttpPostedFileBase excelFile)
        {
            string fileName = string.Empty;
            string path = string.Empty;
            string filePath = string.Empty;

            this.FileUploadViewModel = new FileUploadViewModel();

            if (excelFile != null && excelFile.ContentLength > 0)
            {
                fileName = Path.GetFileName(excelFile.FileName);
                path = DMLHelper.GetDirectoryPath(Request.UserHostAddress);
                DMLHelper.CreateDirectory(path);
                filePath = DMLHelper.GetFilePath(path, fileName);
                excelFile.SaveAs(filePath);
            }

            ExcelFactory excel = new ExcelFactory(filePath);
            this.FileUploadViewModel.DMLInfo = excel.GetSheetData();
            return View(this.FileUploadViewModel); 
        }

        /// <summary>
        /// Files the upload.
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        [ActionName("FileUpload")]
        [Button(ButtonName = "Verify")]
        public ActionResult CreateDML()
        {
            Contract.Requires<ArgumentNullException>(this.FileUploadViewModel != null, "File upload view model is null.");
            Contract.Requires<ArgumentNullException>(this.FileUploadViewModel.DMLInfo != null, "DML information is null.");
            Contract.Requires<ArgumentNullException>(this.FileUploadViewModel.DMLInfo.Count > 0, "DML information is null.");
            DataSet dataSet = new DataSet();
            this.FileUploadViewModel.DMLInfo.ForEach(
                Info => 
                {
                    Info.ToDataTable();
                });
            return View(this.FileUploadViewModel);
        }
    }
}
